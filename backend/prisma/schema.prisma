generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// ENUM TYPES (mapped to existing DB types)
// ================================

enum UserRole {
  administrator
  accountant
  @@map("user_role")
}

enum AvatarType {
  generated
  uploaded
  social
  gravatar
  @@map("avatar_type")
}

enum AuditAction {
  create
  update
  delete
  login
  logout
  failed_login
  password_change
  photo_upload
  photo_delete
  @@map("audit_action")
}

// ================================
// MODELS (mapped to snake_case tables/columns)
// ================================

model UserAccount {
  id                  Int       @id @default(autoincrement()) @map("id")
  username            String    @unique @map("username")
  email               String    @unique @map("email")
  passwordHash        String    @map("password_hash")
  fullName            String    @map("full_name")
  role                UserRole  @default(accountant) @map("role")
  profileImageUrl     String?   @map("profile_image_url")
  avatarType          AvatarType @default(generated) @map("avatar_type")
  photoRequested      Boolean   @default(true) @map("photo_requested")
  photoUploadedAt     DateTime? @map("photo_uploaded_at")
  photoReminderSentAt DateTime? @map("photo_reminder_sent_at")
  isActive            Boolean   @default(true) @map("is_active")
  lastLogin           DateTime? @map("last_login")
  lastActivity        DateTime? @map("last_activity")
  failedLoginAttempts Int       @default(0) @map("failed_login_attempts")
  lockedUntil         DateTime? @map("locked_until")
  passwordChangedAt   DateTime? @map("password_changed_at")
  mustChangePassword  Boolean   @default(false) @map("must_change_password")
  googleId            String?   @unique @map("google_id")
  facebookId          String?   @unique @map("facebook_id")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")
  createdById         Int?      @map("created_by")
  updatedById         Int?      @map("updated_by")

  // Self-referencing relations
  createdEntries      UserAccount[] @relation("CreatedByEntries")
  updatedEntries      UserAccount[] @relation("UpdatedByEntries")

  // Relations to other tables
  sessions            UserSession[]
  createdPermissions  RolePermission[] @relation("PermissionCreator")
  auditLogs           UserAuditLog[]

  // References to creator/updater
  createdBy           UserAccount? @relation("CreatedByEntries", fields: [createdById], references: [id], onDelete: SetNull)
  updatedBy           UserAccount? @relation("UpdatedByEntries", fields: [updatedById], references: [id], onDelete: SetNull)

  @@index([username])
  @@index([email])
  @@index([role])
  @@index([isActive])
  @@index([lockedUntil])
  @@index([avatarType])
  @@index([photoRequested])
  @@index([createdById])
  @@index([updatedById])

  @@map("user_account")
}

model UserSession {
  id           Int      @id @default(autoincrement()) @map("id")
  userId       Int      @map("user_id")
  token        String   @unique @map("token") @db.Text
  ipAddress    String?  @map("ip_address") @db.Inet
  userAgent    String?  @map("user_agent") @db.Text
  isActive     Boolean  @default(true) @map("is_active")
  expiresAt    DateTime @map("expires_at")
  lastActivity DateTime @default(now()) @map("last_activity")
  createdAt    DateTime @default(now()) @map("created_at")

  user         UserAccount @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@index([isActive, expiresAt])

  @@map("user_session")
}

model RolePermission {
  id          Int       @id @default(autoincrement()) @map("id")
  role        UserRole  @map("role")
  module      String    @map("module")
  canRead     Boolean   @default(false) @map("can_read")
  canCreate   Boolean   @default(false) @map("can_create")
  canUpdate   Boolean   @default(false) @map("can_update")
  canDelete   Boolean   @default(false) @map("can_delete")
  createdAt   DateTime  @default(now()) @map("created_at")
  createdById Int?      @map("created_by")

  createdBy   UserAccount? @relation("PermissionCreator", fields: [createdById], references: [id], onDelete: SetNull)

  @@unique([role, module])
  @@index([role, module])
  @@index([createdById])

  @@map("role_permission")
}

model UserAuditLog {
  id          BigInt    @id @default(autoincrement()) @map("id")
  userId      Int?      @map("user_id")
  action      AuditAction @map("action")
  entityType  String    @default("user") @map("entity_type")
  entityId    Int?      @map("entity_id")
  oldData     Json?     @map("old_data") @db.JsonB
  newData     Json?     @map("new_data") @db.JsonB
  ipAddress   String?   @map("ip_address") @db.Inet
  userAgent   String?   @map("user_agent") @db.Text
  success     Boolean   @default(true) @map("success")
  errorMessage String?  @map("error_message") @db.Text
  performedAt DateTime  @default(now()) @map("performed_at")

  user        UserAccount? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([action])
  @@index([performedAt])
  @@index([entityType, entityId])
  @@index([userId, performedAt])

  @@map("user_audit_log")
}